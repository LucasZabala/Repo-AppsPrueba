// <auto-generated />
using System;
using Concierto.Logic.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Concierto.Logic.Migrations
{
    [DbContext(typeof(ConciertoDbContext))]
    [Migration("20250912043301_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Concierto.Logic.Models.Administrador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Pass")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Administradores");
                });

            modelBuilder.Entity("Concierto.Logic.Models.Asiento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<int>("LugarId")
                        .HasColumnType("int");

                    b.Property<int>("NumAsiento")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LugarId");

                    b.ToTable("Asiento");
                });

            modelBuilder.Entity("Concierto.Logic.Models.Boleto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AsientoId")
                        .HasColumnType("int");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<int>("EventoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaHoraCompra")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreyApellido")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Precio")
                        .HasPrecision(18, 2)
                        .HasColumnType("Decimal");

                    b.HasKey("Id");

                    b.HasIndex("AsientoId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("EventoId");

                    b.ToTable("Boletos");
                });

            modelBuilder.Entity("Concierto.Logic.Models.Cantante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("NombreArtistico")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Cantantes");
                });

            modelBuilder.Entity("Concierto.Logic.Models.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Pass")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("Concierto.Logic.Models.Empleado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Pass")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Empleados");
                });

            modelBuilder.Entity("Concierto.Logic.Models.Evento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Fecha")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("HoraFin")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("HoraInicio")
                        .HasColumnType("time");

                    b.Property<int>("LugarId")
                        .HasColumnType("int");

                    b.Property<string>("TituloEvento")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("LugarId");

                    b.ToTable("Eventos");
                });

            modelBuilder.Entity("Concierto.Logic.Models.EventoCantante", b =>
                {
                    b.Property<int>("EventoId")
                        .HasColumnType("int");

                    b.Property<int>("CantanteId")
                        .HasColumnType("int");

                    b.HasKey("EventoId", "CantanteId");

                    b.HasIndex("CantanteId");

                    b.ToTable("EventoCantante");
                });

            modelBuilder.Entity("Concierto.Logic.Models.EventoEmpleado", b =>
                {
                    b.Property<int>("EventoId")
                        .HasColumnType("int");

                    b.Property<int>("EmpleadoId")
                        .HasColumnType("int");

                    b.HasKey("EventoId", "EmpleadoId");

                    b.HasIndex("EmpleadoId");

                    b.ToTable("EventoEmpleado");
                });

            modelBuilder.Entity("Concierto.Logic.Models.Lugar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CantidadAsientos")
                        .HasColumnType("int");

                    b.Property<string>("Direccion")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Direcciones");
                });

            modelBuilder.Entity("Concierto.Logic.Models.Asiento", b =>
                {
                    b.HasOne("Concierto.Logic.Models.Lugar", "Lugar")
                        .WithMany("Asientos")
                        .HasForeignKey("LugarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lugar");
                });

            modelBuilder.Entity("Concierto.Logic.Models.Boleto", b =>
                {
                    b.HasOne("Concierto.Logic.Models.Asiento", "Asiento")
                        .WithMany("Boletos")
                        .HasForeignKey("AsientoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Concierto.Logic.Models.Cliente", "Cliente")
                        .WithMany("Boletos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Concierto.Logic.Models.Evento", "Evento")
                        .WithMany("Boletos")
                        .HasForeignKey("EventoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asiento");

                    b.Navigation("Cliente");

                    b.Navigation("Evento");
                });

            modelBuilder.Entity("Concierto.Logic.Models.Evento", b =>
                {
                    b.HasOne("Concierto.Logic.Models.Lugar", "Lugar")
                        .WithMany("Eventos")
                        .HasForeignKey("LugarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lugar");
                });

            modelBuilder.Entity("Concierto.Logic.Models.EventoCantante", b =>
                {
                    b.HasOne("Concierto.Logic.Models.Cantante", "Cantante")
                        .WithMany("EventosCantante")
                        .HasForeignKey("CantanteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Concierto.Logic.Models.Evento", "Evento")
                        .WithMany("EventoCantantes")
                        .HasForeignKey("EventoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cantante");

                    b.Navigation("Evento");
                });

            modelBuilder.Entity("Concierto.Logic.Models.EventoEmpleado", b =>
                {
                    b.HasOne("Concierto.Logic.Models.Empleado", "Empleado")
                        .WithMany("EventosEmpleado")
                        .HasForeignKey("EmpleadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Concierto.Logic.Models.Evento", "Evento")
                        .WithMany("EventoEmpleados")
                        .HasForeignKey("EventoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empleado");

                    b.Navigation("Evento");
                });

            modelBuilder.Entity("Concierto.Logic.Models.Asiento", b =>
                {
                    b.Navigation("Boletos");
                });

            modelBuilder.Entity("Concierto.Logic.Models.Cantante", b =>
                {
                    b.Navigation("EventosCantante");
                });

            modelBuilder.Entity("Concierto.Logic.Models.Cliente", b =>
                {
                    b.Navigation("Boletos");
                });

            modelBuilder.Entity("Concierto.Logic.Models.Empleado", b =>
                {
                    b.Navigation("EventosEmpleado");
                });

            modelBuilder.Entity("Concierto.Logic.Models.Evento", b =>
                {
                    b.Navigation("Boletos");

                    b.Navigation("EventoCantantes");

                    b.Navigation("EventoEmpleados");
                });

            modelBuilder.Entity("Concierto.Logic.Models.Lugar", b =>
                {
                    b.Navigation("Asientos");

                    b.Navigation("Eventos");
                });
#pragma warning restore 612, 618
        }
    }
}
